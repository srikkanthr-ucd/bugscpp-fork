```c++
static bool isLifetimeBorrowed(const ValueType *vt, const ValueType *vtParent)
{
    if (!vtParent)
        return false;
    if (!vt)
        return false;
    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
        if (vtParent->pointer > vt->pointer) // <start_bug>
            return false; // <end_bug>
        if (vtParent->pointer < vt->pointer && vtParent->isIntegral())
            return true;
        if (vtParent->str() == vt->str())
            return true;
        if (vtParent->pointer == vt->pointer && vtParent->type == vt->type && vtParent->isIntegral())
            // sign conversion
            return true;
    }

    return false;
}
```

```json
{
  "error": [
    {
      "line_number": 16,
      "error_type": "logical_error",
      "explanation": "The condition `vtParent->pointer > vt->pointer` is invalid when checking if `vt` is lifetime borrowed from `vtParent`. It should be `vtParent->pointer < vt->pointer` instead."
    }
  ],
  "confidence": 1
}
```