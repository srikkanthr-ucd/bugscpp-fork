```c++
static bool isContainerSizeChangedByFunction(const Token *tok, int depth = 20)
{
    if (!tok->valueType() || !tok->valueType()->container)
        return false;
    // If we are accessing an element then we are not changing the container size
    if (Token::Match(tok, "%name% . %name% (")) {
        Library::Container::Yield yield = tok->valueType()->container->getYield(tok->strAt(2));
        if (yield != Library::Container::Yield::NO_YIELD)
            return false;
    }
    if (Token::simpleMatch(tok->astParent(), "["))
        return false;

    // address of variable
    const bool addressOf = tok->valueType()->pointer || (tok->astParent() && tok->astParent()->isUnaryOp("&"));

    int narg;
    const Token * ftok = getTokenArgumentFunction(tok, narg);
    if (!ftok)
        return false; // not a function => variable not changed
    const Function * fun = ftok->function();
    if (fun) {
        const Variable *arg = fun->getArgumentVar(narg);
        if (arg && !arg->isReference() && !addressOf) {
            return false; // not a reference and not taking address => variable not changed
        }
        if (arg && addressOf && arg->isConst())
            return false; // taking address of a const variable => variable not changed
        if (arg && !addressOf && arg->valueType() && arg->valueType()->constness == 1)
            return false; // variable is const => variable not changed
        const Scope * scope = fun->functionScope;
        if (scope) {
            // Argument not used
            if (!arg->nameToken())
                return false;
            if (depth > 0)
                return isContainerSizeChanged(arg->declarationId(), scope->bodyStart, scope->bodyEnd, depth - 1);
        }
        // Don't know => Safe guess
        return true;
    }

    bool inconclusive = false;
    const bool isChanged = isVariableChangedByFunctionCall(tok, 0, nullptr, &inconclusive);
    return (isChanged || inconclusive);
}
```

```json
{
  "error": [
    {
      "line_number": 29,
      "error_type": "logical issue",
      "explanation": "The condition should be `arg && !arg->isReference() && !addressOf` instead of `arg && !arg->isReference() | !addressOf`"
    }
  ],
  "confidence": 0.96
}
```