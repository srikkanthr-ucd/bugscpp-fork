You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
std::vector<LifetimeToken> getLifetimeTokens(const Token* tok, ValueFlow::Value::ErrorPath errorPath, int depth)
{
    if (!tok)
        return std::vector<LifetimeToken> {};
    const Variable *var = tok->variable();
    if (depth < 0)
        return {{tok, std::move(errorPath)}};
    if (var && var->declarationId() == tok->varId()) {
        if (var->isReference() || var->isRValueReference()) {
            if (!var->declEndToken())
                return {{tok, true, std::move(errorPath)}};
            if (var->isArgument()) {
                errorPath.emplace_back(var->declEndToken(), "Passed to reference.");
                return {{tok, true, std::move(errorPath)}};
            } else if (Token::simpleMatch(var->declEndToken(), "=")) {
                errorPath.emplace_back(var->declEndToken(), "Assigned to reference.");
                const Token *vartok = var->declEndToken()->astOperand2();
                if (vartok == tok || (var->isConst() && isTemporary(true, vartok, nullptr, true)))
                    return {{tok, true, std::move(errorPath)}};
                if (vartok)
                    return getLifetimeTokens(vartok, std::move(errorPath), depth - 1);
            } else if (Token::simpleMatch(var->nameToken()->astParent(), ":") &&
                       var->nameToken()->astParent()->astParent() &&
                       Token::simpleMatch(var->nameToken()->astParent()->astParent()->previous(), "for (")) {
                errorPath.emplace_back(var->nameToken(), "Assigned to reference.");
                const Token* vartok = var->nameToken();
                if (vartok == tok)
                    return {{tok, true, std::move(errorPath)}};
                const Token* contok = var->nameToken()->astParent()->astOperand2();
                if (contok)
                    return getLifetimeTokens(contok, std::move(errorPath), depth - 1);
            } else {
                return std::vector<LifetimeToken> {};
            }
        }
    } else if (Token::Match(tok->previous(), "%name% (")) {
        const Function *f = tok->previous()->function();
        if (f) {
            if (!Function::returnsReference(f))
                return {{tok, std::move(errorPath)}};
            std::vector<LifetimeToken> result;
            std::vector<const Token*> returns = Function::findReturns(f);
            for (const Token* returnTok : returns) {
                if (returnTok == tok)
                    continue;
                for (LifetimeToken& lt : getLifetimeTokens(returnTok, std::move(errorPath), depth - 1)) {
                    const Token* argvarTok = lt.token;
                    const Variable* argvar = argvarTok->variable();
                    if (!argvar)
                        continue;
                    if (argvar->isArgument() && (argvar->isReference() || argvar->isRValueReference())) {
                        int n = getArgumentPos(argvar, f);
                        if (n < 0)
                            return std::vector<LifetimeToken> {};
                        std::vector<const Token*> args = getArguments(tok->previous());
                        // TODO: Track lifetimes of default parameters
                        if (n >= args.size())
                            return std::vector<LifetimeToken> {};
                        const Token* argTok = args[n];
                        lt.errorPath.emplace_back(returnTok, "Return reference.");
                        lt.errorPath.emplace_back(tok->previous(), "Called function passing '" + argTok->str() + "'.");
                        std::vector<LifetimeToken> arglts = LifetimeToken::setInconclusive(
                                                                getLifetimeTokens(argTok, std::move(lt.errorPath), depth - 1), returns.size() > 1);
                        result.insert(result.end(), arglts.begin(), arglts.end());
                    }
                }
            }
            return result;
        } else if (Token::Match(tok->tokAt(-2), ". %name% (") && astIsContainer(tok->tokAt(-2)->astOperand1())) {
            const Library::Container* library = getLibraryContainer(tok->tokAt(-2)->astOperand1());
            Library::Container::Yield y = library->getYield(tok->previous()->str());
            if (y == Library::Container::Yield::AT_INDEX || y == Library::Container::Yield::ITEM) {
                errorPath.emplace_back(tok->previous(), "Accessing container.");
                return LifetimeToken::setAddressOf(
                           getLifetimeTokens(tok->tokAt(-2)->astOperand1(), std::move(errorPath), depth - 1), false);
            }
        }
    } else if (Token::Match(tok, ".|::|[")) {
        const Token *vartok = tok;
        while (vartok) {
            if (vartok->str() == "[" || vartok->originalName() == "->")
                vartok = vartok->astOperand1();
            else if (vartok->str() == "." || vartok->str() == "::")
                vartok = vartok->astOperand2();
            else
                break;
        }

        if (!vartok)
            return {{tok, std::move(errorPath)}};
        const Variable *tokvar = vartok->variable();
        if (!astIsContainer(vartok) && !(tokvar && tokvar->isArray() && !tokvar->isArgument()) &&
            (Token::Match(vartok->astParent(), "[|*") || vartok->astParent()->originalName() == "->")) {
            for (const ValueFlow::Value &v : vartok->values()) {
                if (!v.isLocalLifetimeValue())
                    continue;
                errorPath.insert(errorPath.end(), v.errorPath.begin(), v.errorPath.end());
                return getLifetimeTokens(v.tokvalue, std::move(errorPath));
            }
        } else {
            return LifetimeToken::setAddressOf(getLifetimeTokens(vartok, std::move(errorPath)),
                                               !(astIsContainer(vartok) && Token::simpleMatch(vartok->astParent(), "[")));
        }
    }
    return {{tok, std::move(errorPath)}};
}

>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:
Internal ctest changing into directory: /home/workspace/build
Test project /home/workspace/build
    Start 5: TestAutoVariables
1/1 Test #5: TestAutoVariables ................***Failed    0.63 sec
TestAutoVariables::testautovar1
TestAutoVariables::testautovar2
TestAutoVariables::testautovar3
TestAutoVariables::testautovar4
TestAutoVariables::testautovar5
TestAutoVariables::testautovar6
TestAutoVariables::testautovar7
TestAutoVariables::testautovar8
TestAutoVariables::testautovar9
TestAutoVariables::testautovar10
TestAutoVariables::testautovar11
TestAutoVariables::testautovar12
TestAutoVariables::testautovar13
TestAutoVariables::testautovar14
TestAutoVariables::testautovar15
TestAutoVariables::testautovar16
TestAutoVariables::testautovar_array1
TestAutoVariables::testautovar_array2
TestAutoVariables::testautovar_normal
TestAutoVariables::testautovar_ptrptr
TestAutoVariables::testautovar_return1
TestAutoVariables::testautovar_return2
TestAutoVariables::testautovar_return3
TestAutoVariables::testautovar_return4
TestAutoVariables::testautovar_extern
TestAutoVariables::testinvaliddealloc
TestAutoVariables::testinvaliddealloc_C
TestAutoVariables::testassign1
TestAutoVariables::testassign2
TestAutoVariables::assignAddressOfLocalArrayToGlobalPointer
TestAutoVariables::assignAddressOfLocalVariableToGlobalPointer
TestAutoVariables::assignAddressOfLocalVariableToMemberVariable
TestAutoVariables::returnLocalVariable1
TestAutoVariables::returnLocalVariable2
TestAutoVariables::returnLocalVariable3
TestAutoVariables::returnLocalVariable4
TestAutoVariables::returnLocalVariable5
TestAutoVariables::returnLocalVariable6
TestAutoVariables::returnReference1
TestAutoVariables::returnReference2
TestAutoVariables::returnReference3
TestAutoVariables::returnReference4
TestAutoVariables::returnReference5
TestAutoVariables::returnReference6
TestAutoVariables::returnReference7
TestAutoVariables::returnReference8
TestAutoVariables::returnReference9
TestAutoVariables::returnReference10
TestAutoVariables::returnReference11
TestAutoVariables::returnReference12
TestAutoVariables::returnReference13
TestAutoVariables::returnReference14
TestAutoVariables::returnReference15
TestAutoVariables::returnReference16
TestAutoVariables::returnReference16
TestAutoVariables::returnReference17
TestAutoVariables::returnReference18
TestAutoVariables::returnReference19
TestAutoVariables::returnReference20
TestAutoVariables::returnReferenceFunction
TestAutoVariables::returnReferenceContainer
TestAutoVariables::returnReferenceLiteral
TestAutoVariables::returnReferenceCalculation
TestAutoVariables::returnReferenceLambda
TestAutoVariables::returnReferenceInnerScope
TestAutoVariables::returnReferenceRecursive
TestAutoVariables::extendedLifetime
TestAutoVariables::danglingReference
TestAutoVariables::testglobalnamespace
TestAutoVariables::returnParameterAddress
TestAutoVariables::testconstructor
TestAutoVariables::variableIsUsedInScope
TestAutoVariables::danglingLifetimeLambda
TestAutoVariables::danglingLifetimeContainer
TestAutoVariables::danglingLifetime
TestAutoVariables::danglingLifetimeFunction
TestAutoVariables::danglingLifetimeAggegrateConstructor
TestAutoVariables::danglingLifetimeInitList
TestAutoVariables::danglingLifetimeImplicitConversion
TestAutoVariables::danglingTemporaryLifetime
TestAutoVariables::invalidLifetime
TestAutoVariables::deadPointer


Testing Complete
Number of tests: 82
Number of todos: 10
Tests failed: 1

/home/workspace/test/testautovariables.cpp:2151(TestAutoVariables::danglingLifetimeContainer): Assertion failed. 
Expected: 

Actual: 
[test.cpp:4] -> [test.cpp:4]: (error) Reference to local variable returned.\n

_____


0% tests passed, 1 tests failed out of 1

Total Test time (real) =   0.68 sec

The following tests FAILED:
	  5 - TestAutoVariables (Failed)
Errors while running CTest

>>>

The following is the relevant code of that failed test case.

<<< Test Code:
        check("std::vector<int>* g();\n"
              "int& f() {\n"
              "    auto* p = g();\n"
              "    return p->front();\n"
              "}\n");
        ASSERT_EQUALS("", errout.str());
>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
