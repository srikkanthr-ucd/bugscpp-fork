test_result: 
berry-3: 
build_result: True
test_cases_result:  
pass_rate: 0.0
pass_test_cases: []
fail_test_cases: ['berry-buggy-3-8']
fail_test_cases_info: {'berry-buggy-3-8': {'failing_info': 'syntax_error: tests/class_const.be:97: register overflow (more than 255)\n', 'tc_code': 'def assert_attribute_error(f)\n    try\n        f()\n        assert(false, \'unexpected execution flow\')\n    except .. as e, m\n        assert(e == \'attribute_error\')\n    end\nend\n\nclass A\n    static a\n    def init() self.b = 2 end\n    def f() end \n    var b \n    static c, s, r\nend\n\nassert(A.a == nil)\nassert(A.c == nil)\nassert(A.s == nil)\nassert_attribute_error(/-> A.b)\nassert_attribute_error(/-> A.d)\n\na = A()\nassert(a.b == 2)\nassert(a.a == nil)\nassert(a.c == nil)\n\nA.a = 1\nA.c = 3\nA.s = "foo"\nA.r = 3.5\nassert(a.a == 1)\nassert(a.c == 3)\nassert(A.a == 1)\nassert(A.c == 3)\nimport gc gc.collect()\nassert(A.s == "foo")\nassert(a.s == "foo")\nassert(A.r == 3.5)\nassert(a.r == 3.5)\n\n#- test valid or invalid methods and members -#\n\ndef assert_attribute_error(c)\n    try\n        compile(c)()\n        assert(false, \'unexpected execution flow\')\n    except .. as e, m\n        assert(e == \'attribute_error\')\n    end\nend\n\nclass A\n    var a, g\n    static h\n    def init() self.a = 1 end\n    def f(x, y) return type(self) end\nend\na=A()\na.g = def (x, y) return type(x) end\nA.h = def (x, y) return type(x) end\n\nassert(type(a.g) == \'function\')\nassert(type(a.h) == \'function\')\n\nassert_attribute_error("a.g(1,2)")\nassert(a.h(1) == \'instance\')\n# A.h(1) - error\n\n#- test static initializers -#\nclass A\n    static a = 1, b, c = 3.5, d = 42, e = "foo", f = [1], g = {}\n    var aa,ab\nend\n\nassert(A.a == 1)\nassert(A.b == nil)\nassert(A.c == 3.5)\nassert(A.d == 42)\nassert(A.e == "foo")\nassert(A.f == [1])\n\na = A()\nassert(a.a == 1)\nassert(a.b == nil)\nassert(a.c == 3.5)\nassert(a.d == 42)\nassert(a.e == "foo")\nassert(a.f == [1])\nassert(a.g == A.g)\nassert(a.aa == nil)\nassert(a.ab == nil)\n\n#- used to fail for subclasses -#\nclass A static a=1 end\nclass B:A static a=A def f() end static b=1 static c=A end\nassert(A.a == 1)\nassert(B.a == A)\nassert(B.b == 1)\nassert(B.c == A)\n'}}
