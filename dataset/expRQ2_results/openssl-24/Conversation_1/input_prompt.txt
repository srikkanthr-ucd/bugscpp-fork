You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
static bool isContainerSizeChangedByFunction(const Token *tok, int depth = 20)
{
    if (!tok->valueType() || !tok->valueType()->container)
        return false;
    // If we are accessing an element then we are not changing the container size
    if (Token::Match(tok, "%name% . %name% (")) {
        Library::Container::Yield yield = tok->valueType()->container->getYield(tok->strAt(2));
        if (yield != Library::Container::Yield::NO_YIELD)
            return false;
    }
    if (Token::simpleMatch(tok->astParent(), "["))
        return false;

    // address of variable
    const bool addressOf = tok->valueType()->pointer || (tok->astParent() && tok->astParent()->isUnaryOp("&"));

    int narg;
    const Token * ftok = getTokenArgumentFunction(tok, narg);
    if (!ftok)
        return false; // not a function => variable not changed
    const Function * fun = ftok->function();
    if (fun) {
        const Variable *arg = fun->getArgumentVar(narg);
        if (arg) {
            if (!arg->isReference() && !addressOf)
                return false;
            if (!addressOf && arg->isConst())
                return false;
            if (arg->valueType() && arg->valueType()->constness == 1)
                return false;
            if (arg->valueType() && arg->valueType()->constness == 2)
                return false;
            const Scope * scope = fun->functionScope;
            if (scope) {
                // Argument not used
                if (!arg->nameToken())
                    return false;
                if (depth > 0)
                    return isContainerSizeChanged(arg->declarationId(), scope->bodyStart, scope->bodyEnd, depth - 1);
            }
            // Don't know => Safe guess
            return true;
        }
    }

    bool inconclusive = false;
    const bool isChanged = isVariableChangedByFunctionCall(tok, 0, nullptr, &inconclusive);
    return (isChanged || inconclusive);
}

>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:
make depend && make _tests
make[1]: Entering directory '/home/workspace'
make[1]: Leaving directory '/home/workspace'
make[1]: Entering directory '/home/workspace'
( SRCTOP=. \
  BLDTOP=. \
  PERL="/usr/bin/perl" \
  FIPSKEY="f4556650ac31d35461610bac4ed81b1a181b2d8a43ea2854cbae22ca74560813" \
  EXE_EXT= \
  /usr/bin/perl ./test/run_tests.pl test_evp_extra )

    # ERROR: (ptr) 'pkey_dec = d2i_PKCS8PrivateKey_bio(enc_bio, NULL, NULL, (void *)pwd) != NULL' failed @ test/evp_extra_test2.c:315
    # 0x0
    # 808B14F8E77F0000:error:068000A8:asn1 encoding routines:asn1_check_tlen:wrong tag:crypto/asn1/tasn_dec.c:1156:
    # 808B14F8E77F0000:error:0688010A:asn1 encoding routines:asn1_item_embed_d2i:nested asn1 error:crypto/asn1/tasn_dec.c:322:Type=X509_ALGOR
    # 808B14F8E77F0000:error:0688010A:asn1 encoding routines:asn1_template_noexp_d2i:nested asn1 error:crypto/asn1/tasn_dec.c:653:Field=algor, Type=X509_SIG
    # OPENSSL_TEST_RAND_ORDER=1710228668
    not ok 8 - test_pkcs8key_nid_bio
# ------------------------------------------------------------------------------
../../util/wrap.pl ../../test/evp_extra_test2 => 1
not ok 3 - running evp_extra_test2
# ------------------------------------------------------------------------------
#   Failed test 'running evp_extra_test2'
#   at test/recipes/30-test_evp_extra.t line 24.
# Looks like you failed 1 test of 3.30-test_evp_extra.t .. 
Dubious, test returned 1 (wstat 256, 0x100)
Failed 1/3 subtests 

Test Summary Report
-------------------
30-test_evp_extra.t (Wstat: 256 Tests: 3 Failed: 1)
  Failed test:  3
  Non-zero exit status: 1
Files=1, Tests=3,  1 wallclock secs ( 0.02 usr  0.00 sys +  1.32 cusr  0.03 csys =  1.37 CPU)
Result: FAIL
Makefile:3210: recipe for target '_tests' failed
make[1]: *** [_tests] Error 1
make[1]: Leaving directory '/home/workspace'
Makefile:3208: recipe for target 'tests' failed
make: *** [tests] Error 2

>>>

The following is the relevant code of that failed test case.

<<< Test Code:
#! /usr/bin/env perl
# Copyright 2015-2021 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the Apache License 2.0 (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html


use strict;
use warnings;

use OpenSSL::Test qw/:DEFAULT bldtop_dir/;

setup("test_evp_extra");

plan tests => 3;

ok(run(test(["evp_extra_test"])), "running evp_extra_test");

# Run tests with a non-default library context
ok(run(test(["evp_extra_test", "-context"])), "running evp_extra_test with a non-default library context");

ok(run(test(["evp_extra_test2"])), "running evp_extra_test2");

>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
