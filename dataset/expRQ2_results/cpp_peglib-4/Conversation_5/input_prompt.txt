You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
inline void LinkReferences::visit(Reference& ope) {
    // Check if the reference is a macro parameter
    auto found_param = false;
    for (size_t i = 0; i < params_.size(); i++) {
        const auto& param = params_[i];
        if (param == ope.name_) {
            ope.iarg_ = i;
            found_param = true;
            break;
        }
    }

    // If the reference is not a macro parameter, then check if it is a definition rule
    if (!found_param) { // change here
        grammar_.emplace(ope.name_, ope);
    } else if (grammar_[ope.name_].args_ != ope.args_)
        throw std::runtime_error("Multiple definitions of rule " + ope.name_ + " found in the grammar with different argument lists.");

    for (auto arg: ope.args_) {
        arg->accept(*this);
    }
}

>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test-main is a Catch v2.2.2 host application.
Run with -? for options

-------------------------------------------------------------------------------
Macro rule-parameter collision
-------------------------------------------------------------------------------
/home/workspace/test/test.cc:1456
...............................................................................

/home/workspace/test/test.cc:1465: FAILED:
  REQUIRE( parser.parse("c") )
with expansion:
  false

===============================================================================
test cases: 1 | 1 failed
assertions: 1 | 1 failed
>>>

The following is the relevant code of that failed test case.

<<< Test Code:
TEST_CASE("Macro rule-parameter collision", "[macro]")
{
    parser parser(R"(
        A    <- B(C)
        B(D) <- D
        C    <- 'c'
        D    <- 'd'
	)");

    REQUIRE(parser.parse("c"));
}
>>>

The function provided by you is still not correct! Your repaired function is:

<<< Function Repaired By You:
inline void LinkReferences::visit(Reference& ope) {
    // Check if the reference is a macro parameter
    auto found_param = false;
    for (size_t i = 0; i < params_.size(); i++) {
        const auto& param = params_[i];
        if (param == ope.name_) {
            ope.iarg_ = i;
            found_param = true;
            break;
        }
    }

    // If the reference is not a macro parameter, then check if it is a definition rule
    if (!found_param) {
        grammar_.emplace(ope.name_, ope);
    } else if (grammar_[ope.name_].args_.size() != ope.args_.size()) {
        throw std::runtime_error("Multiple definitions of rule " + ope.name_ + " found in the grammar with different argument lists.");
    } else {
        for (size_t i = 0; i < ope.args_.size(); i++) {
            if (ope.args_[i]->getType() == Node::Type::Reference) {
                if (std::static_pointer_cast<peg::Reference>(ope.args_[i])->getText() != std::static_pointer_cast<peg::Reference>(grammar_[ope.name_].args_[i])->getText()) {
                    throw std::runtime_error("Multiple definitions of rule " + ope.name_ + " found in the grammar with different argument lists.");
                }
            }
        }
    }

    for (auto arg: ope.args_) {
        arg->accept(*this);
    }
}

>>>

That function has the following compiliation error:

<<< Compliation Error:
In file included from /home/workspace/test/test.cc:5:0:
/home/workspace/test/../peglib.h: In member function 'virtual void peg::LinkReferences::visit(peg::Reference&)':
/home/workspace/test/../peglib.h:2503:36: error: 'std::unordered_map<std::__cxx11::basic_string<char>, peg::Definition>::mapped_type {aka class peg::Definition}' has no member named 'args_'
     } else if (grammar_[ope.name_].args_.size() != ope.args_.size()) {
                                    ^~~~~
/home/workspace/test/../peglib.h:2507:31: error: 'using element_type = class peg::Ope {aka class peg::Ope}' has no member named 'getType'
             if (ope.args_[i]->getType() == Node::Type::Reference) {
                               ^~~~~~~
/home/workspace/test/../peglib.h:2507:44: error: 'Node' has not been declared
             if (ope.args_[i]->getType() == Node::Type::Reference) {
                                            ^~~~
/home/workspace/test/../peglib.h:2508:77: error: 'using element_type = class peg::Reference {aka class peg::Reference}' has no member named 'getText'
                 if (std::static_pointer_cast<peg::Reference>(ope.args_[i])->getText() != std::static_pointer_cast<peg::Reference>(grammar_[ope.name_].args_[i])->getText()) {
                                                                             ^~~~~~~
/home/workspace/test/../peglib.h:2508:151: error: 'std::unordered_map<std::__cxx11::basic_string<char>, peg::Definition>::mapped_type {aka class peg::Definition}' has no member named 'args_'
                 if (std::static_pointer_cast<peg::Reference>(ope.args_[i])->getText() != std::static_pointer_cast<peg::Reference>(grammar_[ope.name_].args_[i])->getText()) {
                                                                                                                                                       ^~~~~
In file included from /usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h:33:0,
                 from /usr/include/c++/7/bits/allocator.h:46,
                 from /usr/include/c++/7/string:41,
/usr/include/c++/7/bits/unordered_map.h:387:54:   required from 'std::pair<typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::iterator, bool> std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::emplace(_Args&& ...) [with _Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, peg::Reference&}; _Key = std::__cxx11::basic_string<char>; _Tp = peg::Definition; _Hash = std::hash<std::__cxx11::basic_string<char> >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, peg::Definition> >; typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::iterator = std::__detail::_Node_iterator<std::pair<const std::__cxx11::basic_string<char>, peg::Definition>, false, true>]'
/home/workspace/test/../peglib.h:2502:40:   required from here
/usr/include/c++/7/ext/new_allocator.h:136:4: error: no matching function for call to 'std::pair<const std::__cxx11::basic_string<char>, peg::Definition>::pair(const std::__cxx11::basic_string<char>&, peg::Reference&)'
  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/7/bits/stl_algobase.h:64:0,
                 from /usr/include/c++/7/bits/char_traits.h:39,

>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
