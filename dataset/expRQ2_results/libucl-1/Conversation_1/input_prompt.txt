You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
static void
ucl_emit_msgpack_elt (struct ucl_emitter_context *ctx,
		const ucl_object_t *obj, bool first, bool print_key)
{
	ucl_object_iter_t it;
	struct ucl_object_userdata *ud;
	const char *ud_out;
	const ucl_object_t *cur, *celt;

	switch (obj->type) {
	case UCL_INT:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emitter_print_int_msgpack (ctx, ucl_object_toint (obj));
		break;

	case UCL_FLOAT:
	case UCL_TIME:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emitter_print_double_msgpack (ctx, ucl_object_todouble (obj));
		break;

	case UCL_BOOLEAN:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emitter_print_bool_msgpack (ctx, ucl_object_toboolean (obj));
		break;

	case UCL_STRING:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emitter_print_string_msgpack (ctx, obj->value.sv, obj->len);
		break;

	case UCL_NULL:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emitter_print_null_msgpack (ctx);
		break;

	case UCL_OBJECT:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emit_msgpack_start_obj (ctx, obj, print_key);
		it = ucl_object_iterate_new (obj);

		while ((cur = ucl_object_iterate_safe (it, true)) != NULL) {
			LL_FOREACH (cur, celt) {
				ucl_emit_msgpack_elt (ctx, celt, false, true);
				/* XXX:
				 * in msgpack the length of objects is encoded within a single elt
				 * so in case of multi-value keys we are using merely the first
				 * element ignoring others
				 */
				 
			}
		}

		ucl_object_iterate_free (it);
		break;

	case UCL_ARRAY:
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);
		ucl_emit_msgpack_start_array (ctx, obj, print_key);
		it = ucl_object_iterate_new (obj);

		while ((cur = ucl_object_iterate_safe (it, true)) != NULL) {
			ucl_emit_msgpack_elt (ctx, cur, false, false);
		}

		ucl_object_iterate_free (it);
		break;

	case UCL_USERDATA:
		ud = (struct ucl_object_userdata *)obj;
		ucl_emitter_print_key_msgpack (print_key, ctx, obj);

		if (ud->emitter) {
			ud_out = ud->emitter (obj->value.ud);
			if (ud_out == NULL) {
				ud_out = "null";
			}
		}
		ucl_emitter_print_string_msgpack (ctx, obj->value.sv, obj->len);
		break;
	}
}
>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:
========================================
   libucl 0.7.3: tests/test-suite.log
========================================

# TOTAL: 1
# PASS:  0
# SKIP:  0
# XFAIL: 0
# FAIL:  1
# XPASS: 0
# ERROR: 0

.. contents:: :depth: 2

FAIL: msgpack
=============

error parsing input: too long or empty keytest_msgpack: test_msgpack.c:181: main: Assertion `0' failed.
Aborted
FAIL msgpack.test (exit status: 134)


>>>

The following is the relevant code of that failed test case.

<<< Test Code:
if (!ucl_parser_add_chunk_full (parser, emitted, elen, 0,
				UCL_DUPLICATE_APPEND, UCL_PARSE_MSGPACK)) {
			fprintf (stderr, "error parsing input: %s",
					ucl_parser_get_error (parser));
			assert (0);
		}
>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
