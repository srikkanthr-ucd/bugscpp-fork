You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
static bool isLifetimeBorrowed(const ValueType *vt, const ValueType *vtParent)
{
    if (!vtParent)
        return false;
    if (!vt)
        return false;
    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
        if (vtParent->pointer > vt->pointer)
            return true;
        if (vtParent->pointer < vt->pointer && vtParent->isIntegral())
            return true;
        if (vtParent->str() == vt->str())
            return true;
        if (vtParent->pointer == vt->pointer && vtParent->type == vt->type && vtParent->isIntegral())
            // sign conversion
            return true;
    }

    return false;
}

>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:
Internal ctest changing into directory: /home/workspace/build
Test project /home/workspace/build
    Start 5: TestAutoVariables
1/1 Test #5: TestAutoVariables ................***Failed    0.60 sec
TestAutoVariables::testautovar1
TestAutoVariables::testautovar2
TestAutoVariables::testautovar3
TestAutoVariables::testautovar4
TestAutoVariables::testautovar5
TestAutoVariables::testautovar6
TestAutoVariables::testautovar7
TestAutoVariables::testautovar8
TestAutoVariables::testautovar9
TestAutoVariables::testautovar10
TestAutoVariables::testautovar11
TestAutoVariables::testautovar12
TestAutoVariables::testautovar13
TestAutoVariables::testautovar14
TestAutoVariables::testautovar15
TestAutoVariables::testautovar16
TestAutoVariables::testautovar_array1
TestAutoVariables::testautovar_array2
TestAutoVariables::testautovar_normal
TestAutoVariables::testautovar_ptrptr
TestAutoVariables::testautovar_return1
TestAutoVariables::testautovar_return2
TestAutoVariables::testautovar_return3
TestAutoVariables::testautovar_return4
TestAutoVariables::testautovar_extern
TestAutoVariables::testinvaliddealloc
TestAutoVariables::testinvaliddealloc_C
TestAutoVariables::testassign1
TestAutoVariables::testassign2
TestAutoVariables::assignAddressOfLocalArrayToGlobalPointer
TestAutoVariables::assignAddressOfLocalVariableToGlobalPointer
TestAutoVariables::assignAddressOfLocalVariableToMemberVariable
TestAutoVariables::returnLocalVariable1
TestAutoVariables::returnLocalVariable2
TestAutoVariables::returnLocalVariable3
TestAutoVariables::returnLocalVariable4
TestAutoVariables::returnLocalVariable5
TestAutoVariables::returnLocalVariable6
TestAutoVariables::returnReference1
TestAutoVariables::returnReference2
TestAutoVariables::returnReference3
TestAutoVariables::returnReference4
TestAutoVariables::returnReference5
TestAutoVariables::returnReference6
TestAutoVariables::returnReference7
TestAutoVariables::returnReference8
TestAutoVariables::returnReference9
TestAutoVariables::returnReference10
TestAutoVariables::returnReference11
TestAutoVariables::returnReference12
TestAutoVariables::returnReference13
TestAutoVariables::returnReference14
TestAutoVariables::returnReference15
TestAutoVariables::returnReference16
TestAutoVariables::returnReference16
TestAutoVariables::returnReference17
TestAutoVariables::returnReference18
TestAutoVariables::returnReference19
TestAutoVariables::returnReference20
TestAutoVariables::returnReferenceFunction
TestAutoVariables::returnReferenceContainer
TestAutoVariables::returnReferenceLiteral
TestAutoVariables::returnReferenceCalculation
TestAutoVariables::returnReferenceLambda
TestAutoVariables::returnReferenceInnerScope
TestAutoVariables::returnReferenceRecursive
TestAutoVariables::extendedLifetime
TestAutoVariables::danglingReference
TestAutoVariables::testglobalnamespace
TestAutoVariables::returnParameterAddress
TestAutoVariables::testconstructor
TestAutoVariables::variableIsUsedInScope
TestAutoVariables::danglingLifetimeLambda
TestAutoVariables::danglingLifetimeContainer
TestAutoVariables::danglingLifetime
TestAutoVariables::danglingLifetimeFunction
TestAutoVariables::danglingLifetimeAggegrateConstructor
TestAutoVariables::danglingLifetimeInitList
TestAutoVariables::danglingLifetimeImplicitConversion
TestAutoVariables::danglingTemporaryLifetime
TestAutoVariables::invalidLifetime
TestAutoVariables::deadPointer


Testing Complete
Number of tests: 82
Number of todos: 10
Tests failed: 1

/home/workspace/test/testautovariables.cpp:2340(TestAutoVariables::danglingLifetime): Assertion failed. 
Expected: 

Actual: 
[test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning pointer to local variable 'data' that will be invalid when returning.\n

_____


0% tests passed, 1 tests failed out of 1

Total Test time (real) =   0.65 sec

The following tests FAILED:
	  5 - TestAutoVariables (Failed)
Errors while running CTest

>>>

The following is the relevant code of that failed test case.

<<< Test Code:
  check("class C {\n"
              "  std::string f(const char*);\n"
              "};\n"
              "std::string C::f(const char*) {\n"
              "  const char data[] = \"x\";\n"
              "  return data;\n"
              "}\n");
        ASSERT_EQUALS("", errout.str());
>>>

The function provided by you is still not correct! Your repaired function is:

<<< Function Repaired By You:
static bool isLifetimeBorrowed(const ValueType *vt, const ValueType *vtParent)
{
    if (!vtParent)
        return false;
    if (!vt)
        return false;
    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
        if (vtParent->pointer > vt->pointer)
            return true;
        if (vtParent->pointer < vt->pointer && vtParent->isIntegral())
            return true;
        if (vtParent->str() == vt->str())
            return true;
        if (vtParent->pointer == vt->pointer && vtParent->type == vt->type && vtParent->isIntegral())
            // sign conversion
            return true;
        if (vtParent->pointer == vt->pointer && vtParent->type == vt->type && vt->isIntegral() && vtParent->type == ValueType::FLOAT_TYPE)
            // floating point -> integral conversion
            return true;
    }

    return false;
}

>>>

That function has the following compiliation error:

<<< Compliation Error:
[ 44%] Building CXX object lib/CMakeFiles/lib_objs.dir/utils.cpp.o
[ 45%] Building CXX object lib/CMakeFiles/lib_objs.dir/valueflow.cpp.o
/home/workspace/lib/valueflow.cpp: In function 'bool isLifetimeBorrowed(const ValueType*, const ValueType*)':
/home/workspace/lib/valueflow.cpp:3081:128: error: 'FLOAT_TYPE' is not a member of 'ValueType'
         if (vtParent->pointer == vt->pointer && vtParent->type == vt->type && vt->isIntegral() && vtParent->type == ValueType::FLOAT_TYPE)
                                                                                                                                ^~~~~~~~~~
lib/CMakeFiles/lib_objs.dir/build.make:956: recipe for target 'lib/CMakeFiles/lib_objs.dir/valueflow.cpp.o' failed
make[2]: *** [lib/CMakeFiles/lib_objs.dir/valueflow.cpp.o] Error 1
CMakeFiles/Makefile2:354: recipe for target 'lib/CMakeFiles/lib_objs.dir/all' failed
make[1]: *** [lib/CMakeFiles/lib_objs.dir/all] Error 2
Makefile:145: recipe for target 'all' failed
make: *** [all] Error 2


>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
