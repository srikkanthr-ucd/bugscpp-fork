You are a automated program repair tool for C and C++. Your task is to provide a fix for the buggy function below.

<<< Buggy Function:
inline void LinkReferences::visit(Reference& ope) {
    // Check if the reference is a macro parameter
    auto found_param = false;
    for (size_t i = 0; i < params_.size(); i++) {
        const auto& param = params_[i];
        if (param == ope.name_) {
            ope.iarg_ = i;
            found_param = true;
            break;
        }
    }

    // If the reference is not a macro parameter, then check if it is a definition rule
    if (!found_param) { // change here
        grammar_.emplace(ope.name_, ope);
    } else if (grammar_[ope.name_].args_ != ope.args_)
        throw std::runtime_error("Multiple definitions of rule " + ope.name_ + " found in the grammar with different argument lists.");

    for (auto arg: ope.args_) {
        arg->accept(*this);
    }
}

>>>

The following was the errors outputted by a failed test case.

<<< Test Failed Log:
expecting ERROR_CALLBACK_REQUIRED (14), got: 0
FAIL test-api (exit status: 1)
>>>

The following is the relevant code of that failed test case.

<<< Test Code:
void test_issue_920()
{
  const char* rules_str = "\
      rule test { \
        condition: true \
      }";

  YR_COMPILER* compiler = NULL;

  yr_initialize();

  if (yr_compiler_create(&compiler) != ERROR_SUCCESS)
  {
    perror("yr_compiler_create");
    exit(EXIT_FAILURE);
  }

  // Define a variable named "test"
  yr_compiler_define_boolean_variable(compiler, "test", 1);

  // The compilation should not succeed, as the rule is named "test" and a
  // a variable with the same name already exists.
  yr_compiler_add_string(compiler, rules_str, NULL);

  if (compiler->last_error != ERROR_DUPLICATED_IDENTIFIER)
  {
    yr_compiler_destroy(compiler);
    printf("expecting ERROR_CALLBACK_REQUIRED (%d), got: %d\n",
           ERROR_DUPLICATED_IDENTIFIER, compiler->last_error);
    exit(EXIT_FAILURE);
  }

  yr_compiler_destroy(compiler);
  yr_finalize();
}
>>>

The function provided by you is still not correct! Your repaired function is:

<<< Function Repaired By You:
inline void LinkReferences::visit(Reference& ope) {
    // Check if the reference is a macro parameter
    auto found_param = false;
    for (size_t i = 0; i < params_.size(); i++) {
        const auto& param = params_[i];
        if (param == ope.name_) {
            ope.iarg_ = i;
            found_param = true;
            break;
        }
    }

    // If the reference is not a macro parameter, then check if it is a definition rule
    if (!found_param) {
        grammar_.emplace(ope.name_, ope);
    } else if (grammar_[ope.name_].args_ != ope.args_)
        throw std::runtime_error("Multiple definitions of rule " + ope.name_ + " found in the grammar with different argument lists.");
    else if (grammar_[ope.name_].iarg_ != ope.iarg_)
        throw std::runtime_error("Multiple definitions rules have the same name and the same arguments but different reference index.");

    for (auto arg: ope.args_) {
        arg->accept(*this);
    }
}

>>>

That function has the following compiliation error:

<<< Compliation Error:
  CC       parser.lo
parser.c:714:27: error: expected '=', ',', ';', 'asm' or '__attribute__' before ':' token
  714 | inline void LinkReferences::visit(Reference& ope) {
      |                           ^
make[2]: *** [Makefile:728: parser.lo] Error 1
make[2]: Leaving directory '/home/workspace/libyara'
make[1]: *** [Makefile:520: all] Error 2

>>>

You will only respond with your repaired function in a code snippet as below:
```
<Your repaired function>
```
