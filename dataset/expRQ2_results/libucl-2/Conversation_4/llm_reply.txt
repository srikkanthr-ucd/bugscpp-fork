```
static ucl_object_t *
ucl_parse_macro_arguments (struct ucl_parser *parser,
		struct ucl_chunk *chunk)
{
	ucl_object_t *res = NULL;
	struct ucl_parser *params_parser;
	int obraces = 1, ebraces = 0, state = 0;
	const unsigned char *p, *c;
	size_t args_len = 0;
	struct ucl_parser_saved_state saved;

	saved.column = chunk->column;
	saved.line = chunk->line;
	saved.pos = chunk->pos;
	saved.remain = chunk->remain;
	p = chunk->pos;

	if (*p == '(') {
		ucl_chunk_skipc (chunk, p);
	} else {
		return NULL;
	}

	c = p++;
	while ((p) < (chunk)->end) {
		switch (state) {
		case 0:
			if (*p == '(') {
				obraces++;
			} else if (*p == ')') {
				ebraces++;
			} else if (*p == '"') {
				state = 1;
			}
			p++;
			if (obraces == ebraces) {
				state = 99;
			}
			break;
		case 1:
			if (*p == '"' && *(p - 1) != '\\') {
				state = 0;
			}
			p++;
			break;
		case 99:
			args_len = p - c - 1;
			params_parser = ucl_parser_new (parser->flags);
			if (!ucl_parser_add_chunk (params_parser, c, args_len)) {
				ucl_set_err (parser, UCL_ESYNTAX, "macro arguments parsing error",
						&parser->err);
			}
			else {
				res = ucl_parser_get_object (params_parser);
			}
			ucl_parser_free (params_parser);
			return res;

			break;
		}
	}

	return res;

restore_chunk:
	chunk->column = saved.column;
	chunk->line = saved.line;
	chunk->pos = saved.pos;
	chunk->remain = saved.remain;

	return NULL;
}
```