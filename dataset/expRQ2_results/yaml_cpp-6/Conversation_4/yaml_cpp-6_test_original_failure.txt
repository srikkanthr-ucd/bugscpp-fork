test_result: 
yaml_cpp-6: 
build_result: True
test_cases_result:  
pass_rate: 0.0
pass_test_cases: []
fail_test_cases: ['yaml_cpp-buggy-6-10']
fail_test_cases_info: {'yaml_cpp-buggy-6-10': {'failing_info': 'Note: Google Test filter = NodeTest.SpecialFlow\n[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from NodeTest\n[ RUN      ] NodeTest.SpecialFlow\n/home/workspace/test/integration/load_node_test.cpp:299: Failure\nExpected equality of these values:\n  test.expected_content\n    Which is: "key: value"\n  std::string(emitter.c_str())\n    Which is: "\\"key\\\\t\\": \\"value\\\\t\\""\n/home/workspace/test/integration/load_node_test.cpp:299: Failure\nExpected equality of these values:\n  test.expected_content\n    Which is: "key: value"\n  std::string(emitter.c_str())\n    Which is: "\\"key\\\\t\\": \\"value\\\\t\\""\n/home/workspace/test/integration/load_node_test.cpp:299: Failure\nExpected equality of these values:\n  test.expected_content\n    Which is: "{key: value}"\n  std::string(emitter.c_str())\n    Which is: "{\\"key\\\\t\\": \\"value\\\\t\\"}"\n/home/workspace/test/integration/load_node_test.cpp:299: Failure\nExpected equality of these values:\n  test.expected_content\n    Which is: "{key: value}"\n  std::string(emitter.c_str())\n    Which is: "{\\"key\\\\t\\": \\"value\\\\t\\"}"\n[  FAILED  ] NodeTest.SpecialFlow (2 ms)\n[----------] 1 test from NodeTest (2 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (2 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] NodeTest.SpecialFlow\n\n 1 FAILED TEST\n', 'tc_code': 'TEST(NodeTest, SpecialFlow) {\n  std::vector<SingleNodeTestCase> tests = {\n      {"[:]", NodeType::Sequence, 1, "[{~: ~}]"},\n      {"[a:]", NodeType::Sequence, 1, "[{a: ~}]"},\n      {"[:a]", NodeType::Sequence, 1, "[:a]"},\n      {"[,]", NodeType::Sequence, 1, "[~]"},\n      {"[a:,]", NodeType::Sequence, 1, "[{a: ~}]"},\n      {"{:}", NodeType::Map, 1, "{~: ~}"},\n      {"{a:}", NodeType::Map, 1, "{a: ~}"},\n      {"{:a}", NodeType::Map, 1, "{:a: ~}"},\n      {"{,}", NodeType::Map, 1, "{~: ~}"},\n      {"{a:,}", NodeType::Map, 1, "{a: ~}"},\n      //testcase for the trailing TAB of scalar\n      {"key\\t: value\\t", NodeType::Map, 1, "key: value"},\n      {"key\\t: value\\t #comment", NodeType::Map, 1, "key: value"},\n      {"{key\\t: value\\t}", NodeType::Map, 1, "{key: value}"},\n      {"{key\\t: value\\t #comment\\n}", NodeType::Map, 1, "{key: value}"},\n  };\n  for (const SingleNodeTestCase& test : tests) {\n    Node node = Load(test.input);\n    Emitter emitter;\n    emitter << node;\n    EXPECT_EQ(test.nodeType, node.Type());\n    EXPECT_EQ(test.nodeSize, node.size());\n    EXPECT_EQ(test.expected_content, std::string(emitter.c_str()));\n  }\n}'}}
